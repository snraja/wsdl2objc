@implementation %«className»


+ (NSTimeInterval)defaultTimeout
{
	return 10;
}

- (id)init
{
	if((self = [super init])) {
		_address = nil;
		_cookies = nil;
		_customHeaders = [NSMutableDictionary new];
		_timeout = [[self class] defaultTimeout];
		_logXMLInOut = NO;
		_synchronousOperationComplete = NO;
	}
	
	return self;
}

- (id)initWithAddress:(NSString *)anAddress
{
	if((self = [self init])) {
		self.address = [NSURL URLWithString:anAddress];
	}
	
	return self;
}

- (NSString *)MIMEType
{
%IFEQ soapVersion 1.2
	return @"application/soap+xml";
%ELSE
	return @"text/xml";
%ENDIF
}

- (void)addCookie:(NSHTTPCookie *)toAdd
{
	if(toAdd != nil) {
		if(self.cookies == nil) self.cookies = [[NSMutableArray alloc] init];
		[self.cookies addObject:toAdd];
	}
}

- (%«className»Response *)performSynchronousOperation:(%«className»Operation *)operation
{
	self.synchronousOperationComplete = NO;
	[operation start];
	
	// Now wait for response
	NSRunLoop *theRL = [NSRunLoop currentRunLoop];
	
	while (!self.synchronousOperationComplete && [theRL runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]]);

	return operation.response;
}

- (void)performAsynchronousOperation:(%«className»Operation *)operation
{
	[operation start];
}

- (void) operation:(%«className»Operation *)operation completedWithResponse:(%«className»Response *)response
{
	self.synchronousOperationComplete = YES;
}

%FOREACH operation in operations
- (%«className»Response *)%«operation.invokeString»
{
	return [self performSynchronousOperation:[(%«className»_%«operation.className»*)[%«className»_%«operation.className» alloc] initWithBinding:self delegate:self
%FOREACH part in operation.input.body.parts
																							%«part.name»:a%«part.uname»
%ENDFOR
%FOREACH header in operation.input.headers
																							%«header.name»:a%«header.uname»
%ENDFOR
																							]];
}

- (void)%«operation.asyncInvokeString» delegate:(id<%«className»ResponseDelegate>)responseDelegate
{
	[self performAsynchronousOperation: [(%«className»_%«operation.className»*)[%«className»_%«operation.className» alloc] initWithBinding:self delegate:responseDelegate
%FOREACH part in operation.input.body.parts
																							 %«part.name»:a%«part.uname»
%ENDFOR
%FOREACH header in operation.input.headers
																							 %«header.name»:a%«header.uname»
%ENDFOR
																							 ]];
}
%ENDFOR

- (void)sendHTTPCallUsingBody:(NSString *)outputBody soapAction:(NSString *)soapAction forOperation:(%«className»Operation *)operation
{
    if (!outputBody) {
        NSError * err = [NSError errorWithDomain:@"%«className»NULLRequestExcpetion"
                                            code:0
                                        userInfo:nil];
        
        [operation connection:nil didFailWithError:err];
        return;
    }

	NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:self.address 
																												 cachePolicy:NSURLRequestReloadIgnoringLocalAndRemoteCacheData
																										 timeoutInterval:self.timeout];
	NSData *bodyData = [outputBody dataUsingEncoding:NSUTF8StringEncoding];
	
	if(self.cookies != nil) {
		[request setAllHTTPHeaderFields:[NSHTTPCookie requestHeaderFieldsWithCookies: self.cookies]];
	}
	[request setValue:@"wsdl2objc" forHTTPHeaderField:@"User-Agent"];
	[request setValue:soapAction forHTTPHeaderField:@"SOAPAction"];
	[request setValue:[[self MIMEType] stringByAppendingString:@"; charset=utf-8"] forHTTPHeaderField:@"Content-Type"];
	[request setValue:[NSString stringWithFormat:@"%lu", [bodyData length]] forHTTPHeaderField:@"Content-Length"];
	[request setValue:self.address.host forHTTPHeaderField:@"Host"];
	for (NSString *eachHeaderField in [self.customHeaders allKeys]) {
		[request setValue:[self.customHeaders objectForKey:eachHeaderField] forHTTPHeaderField:eachHeaderField];
	}
	[request setHTTPMethod: @"POST"];
	// set version 1.1 - how?
	[request setHTTPBody: bodyData];
		
	if(self.logXMLInOut) {
		NSLog(@"OutputHeaders:\n%@", [request allHTTPHeaderFields]);
		NSLog(@"OutputBody:\n%@", outputBody);
	}
	
	NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:request delegate:operation];
	
	operation.urlConnection = connection;
}

@end

@interface %«className»Operation ()

@property (nonatomic, readwrite) %«className»Response *response;

@end

@implementation %«className»Operation

- (id)initWithBinding:(%«className» *)aBinding delegate:(id<%«className»ResponseDelegate>)aDelegate
{
	if ((self = [super init])) {
		self.binding = aBinding;
		self.response = nil;
		self.delegate = aDelegate;
		self.responseData = nil;
		self.urlConnection = nil;
	}
	
	return self;
}

- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)urlResponse
{
	NSHTTPURLResponse *httpResponse;

	if ([urlResponse isKindOfClass:[NSHTTPURLResponse class]]) {
		httpResponse = (NSHTTPURLResponse *) urlResponse;
	} else {
		httpResponse = nil;
	}
	
	if(self.binding.logXMLInOut) {
		NSLog(@"ResponseStatus: %ld\n", (long)[httpResponse statusCode]);
		NSLog(@"ResponseHeaders:\n%@", [httpResponse allHeaderFields]);
	}

    NSInteger contentLength = [[[httpResponse allHeaderFields] objectForKey:@"Content-Length"] integerValue];
	
	if ([urlResponse.MIMEType rangeOfString:[self.binding MIMEType]].length == 0) {

		if ((self.binding.ignoreEmptyResponse == NO) || (contentLength != 0)) {
			NSError *error = nil;
			[connection cancel];
			if ([httpResponse statusCode] >= 400) {
				NSDictionary *userInfo = [NSDictionary dictionaryWithObjectsAndKeys:[NSHTTPURLResponse localizedStringForStatusCode:[httpResponse statusCode]],NSLocalizedDescriptionKey,
																			  httpResponse.URL, NSURLErrorKey,nil];
				error = [NSError errorWithDomain:@"%«className»ResponseHTTP" code:[httpResponse statusCode] userInfo:userInfo];
			} else {
				NSDictionary *userInfo = [NSDictionary dictionaryWithObjectsAndKeys:
														[NSString stringWithFormat: @"Unexpected response MIME type to SOAP call:%@", urlResponse.MIMEType],NSLocalizedDescriptionKey,
																			  httpResponse.URL, NSURLErrorKey,nil];
				error = [NSError errorWithDomain:@"%«className»ResponseHTTP" code:1 userInfo:userInfo];
			}
				
			[self connection:connection didFailWithError:error];
		} else {
            [self.delegate operation:self completedWithResponse:self.response];
		}
	}
}

- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data
{
	if (self.responseData == nil) {
		self.responseData = [data mutableCopy];
	} else {
		[self.responseData appendData:data];
	}
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
	if (self.binding.logXMLInOut) {
		NSLog(@"ResponseError:\n%@", error);
	}
	self.response.error = error;
	[self.delegate operation:self completedWithResponse:self.response];
}


@end

%FOREACH operation in operations
@implementation %«className»_%«operation.className»

%FOREACH part in operation.input.body.parts
@synthesize %«part.name»;
%ENDFOR
%FOREACH header in operation.input.headers
@synthesize %«header.name»;
%ENDFOR

- (id)initWithBinding:(%«className» *)aBinding delegate:(id<%«className»ResponseDelegate>)responseDelegate
%FOREACH part in operation.input.body.parts
%«part.name»:(%«part.element.type.classNameWithPtr»)a%«part.uname»
%ENDFOR
%FOREACH header in operation.input.headers
%«header.name»:(%«header.type.classNameWithPtr»)a%«header.uname»
%ENDFOR
{
	if((self = [super initWithBinding:aBinding delegate:responseDelegate])) {
%FOREACH part in operation.input.body.parts
		self.%«part.name» = a%«part.uname»;
%ENDFOR
%FOREACH header in operation.input.headers
		self.%«header.name» = a%«header.uname»;
%ENDFOR
	}
	
	return self;
}

- (void)main
{
	self.response = [%«className»Response new];
	
	%«className»_envelope *envelope = [%«className»_envelope sharedInstance];
	
	NSMutableDictionary *headerElements = nil;
%IFDEF operation.input.headers
	headerElements = [NSMutableDictionary dictionary];
%FOREACH header in operation.input.headers
%IFEQ header.type.assignOrRetain strong
	if(%«header.name» != nil) [headerElements setObject:%«header.name» forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName boolean
	if(%«header.name» != nil) [headerElements setObject:[[USBoolean alloc] initWithBool:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName byte
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithChar:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName int
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithInt:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName integer
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithInt:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName nonNegativeInteger
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithInt:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName positiveInteger
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithInt:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName unsignedByte
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithUnsignedChar:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName unsignedInt
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithUnsignedInt:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName long
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithLong:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName unsignedLong
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithUnsignedLong:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName short
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithShort:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName unsignedShort
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithUnsignedShort:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName double
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithDouble:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName float
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithFloat:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFEQ header.type.typeName decimal
	if(%«header.name» != nil) [headerElements setObject:[NSNumber numberWithDouble:*%«header.name»] forKey:@"%«header.wsdlName»"];
%ELSIFNEQ header.type.enumCount 0
	if(%«header.name» != nil) [headerElements setObject:%«header.type.className»_stringFromEnum(%«header.name») forKey:@"%«header.wsdlName»"];
%ENDIF
%ENDFOR
%ENDIF
	
	NSMutableDictionary *bodyElements = nil;
	NSMutableArray *bodyKeys = nil;
%IFDEF operation.input.body.parts
	bodyElements = [NSMutableDictionary dictionary];
	bodyKeys = [NSMutableArray array];
	id obj = nil;
%FOREACH part in operation.input.body.parts
%IFEQ part.element.type.assignOrRetain strong
	if(%«part.name» != nil) obj = %«part.name»;
%ELSIFEQ part.element.type.typeName boolean
	if(%«part.name» != nil) obj = [[USBoolean alloc] initWithBool:*%«part.name»];
%ELSIFEQ part.element.type.typeName byte
	if(%«part.name» != nil) obj = [NSNumber numberWithChar:*%«part.name»];
%ELSIFEQ part.element.type.typeName int
	if(%«part.name» != nil) obj = [NSNumber numberWithInt:*%«part.name»];
%ELSIFEQ part.element.type.typeName integer
	if(%«part.name» != nil) obj = [NSNumber numberWithInt:*%«part.name»];
%ELSIFEQ part.element.type.typeName nonNegativeInteger
	if(%«part.name» != nil) obj = [NSNumber numberWithInt:*%«part.name»];
%ELSIFEQ part.element.type.typeName positiveInteger
	if(%«part.name» != nil) obj = [NSNumber numberWithInt:*%«part.name»];
%ELSIFEQ part.element.type.typeName unsignedChar
	if(%«part.name» != nil) obj = [NSNumber numberWithUnsignedChar:*%«part.name»];
%ELSIFEQ part.element.type.typeName unsignedInt
	if(%«part.name» != nil) obj = [NSNumber numberWithUnsignedInt:*%«part.name»];
%ELSIFEQ part.element.type.typeName long
	if(%«part.name» != nil) obj = [NSNumber numberWithLong:*%«part.name»];
%ELSIFEQ part.element.type.typeName unsignedLong
	if(%«part.name» != nil) obj = [NSNumber numberWithUnsignedLong:*%«part.name»];
%ELSIFEQ part.element.type.typeName short
	if(%«part.name» != nil) obj = [NSNumber numberWithShort:*%«part.name»];
%ELSIFEQ part.element.type.typeName unsignedShort
	if(%«part.name» != nil) obj = [NSNumber numberWithUnsignedShort:*%«part.name»];
%ELSIFEQ part.element.type.typeName double
	if(%«part.name» != nil) obj = [NSNumber numberWithDouble:*%«part.name»];
%ELSIFEQ part.element.type.typeName float
	if(%«part.name» != nil) obj = [NSNumber numberWithFloat:*%«part.name»];
%ELSIFEQ part.element.type.typeName decimal
	if(%«part.name» != nil) obj = [NSNumber numberWithDouble:*%«part.name»];
%ELSIFNEQ part.element.type.enumCount 0
	if(%«part.name» != nil) obj = %«part.element.type.className»_stringFromEnum(%«part.name»);
%ENDIF

	if(obj != nil) {
		[bodyElements setObject:obj forKey:@"%«part.element.wsdlName»"];
		[bodyKeys addObject:@"%«part.element.wsdlName»"];
	}
%ENDFOR
%ENDIF
	
	NSString *operationXMLString = [envelope serializedFormUsingHeaderElements:headerElements bodyElements:bodyElements bodyKeys:bodyKeys];

	[self.binding sendHTTPCallUsingBody:operationXMLString soapAction:@"%«operation.soapAction»" forOperation:self];
}

- (void)connectionDidFinishLoading:(NSURLConnection *)connection
{
	if (self.responseData != nil && self.delegate != nil)
	{
		xmlDocPtr doc;
		xmlNodePtr cur;
		
		if (self.binding.logXMLInOut) {
			NSLog(@"ResponseBody:\n%@", [[NSString alloc] initWithData:self.responseData encoding:NSUTF8StringEncoding]);
		}
		
		doc = xmlReadMemory([self.responseData bytes], (int)[self.responseData length], NULL, NULL, XML_PARSE_COMPACT | XML_PARSE_NOBLANKS);
		
		if (doc == NULL)
		{
			NSDictionary *userInfo = [NSDictionary dictionaryWithObject:@"Errors while parsing returned XML" forKey:NSLocalizedDescriptionKey];
			self.response.error = [NSError errorWithDomain:@"%«className»ResponseXML" code:1 userInfo:userInfo];
			[self.delegate operation:self completedWithResponse:self.response];
		}
		else
		{
			cur = xmlDocGetRootElement(doc);
			cur = cur->children;
			
			for( ; cur != NULL ; cur = cur->next)
			{
				if(cur->type == XML_ELEMENT_NODE)
				{
%IF operation.output.hasHeaders
					if(xmlStrEqual(cur->name, (const xmlChar *) "Header"))
					{
						NSMutableArray *responseHeaders = [NSMutableArray array];
						
						xmlNodePtr headerNode;
						for(headerNode=cur->children ; headerNode != NULL ; headerNode = headerNode->next)
						{
							if(cur->type == XML_ELEMENT_NODE)
							{
%FOREACH header in operation.output.headers
								if(xmlStrEqual(headerNode->name, (const xmlChar *) "%«header.wsdlName»"))
								{
									%«header.type.classNameWithoutPtr» *headerObject = [%«header.type.classNameWithoutPtr» deserializeNode:headerNode];
									if (headerObject != nil) [responseHeaders addObject:headerObject];
								}
%ENDFOR
							}
						}
						
						response.headers = responseHeaders;
					}
%ENDIF
					
					if(xmlStrEqual(cur->name, (const xmlChar *) "Body"))
					{
						NSMutableArray *responseBodyParts = [NSMutableArray array];
						
						xmlNodePtr bodyNode;
						for(bodyNode=cur->children ; bodyNode != NULL ; bodyNode = bodyNode->next)
						{
							if(cur->type == XML_ELEMENT_NODE)
							{
%FOREACH part in operation.output.body.parts
								if(xmlStrEqual(bodyNode->name, (const xmlChar *) "%«part.element.wsdlName»"))
								{
									%«part.element.type.classNameWithoutPtr» *bodyObject = [%«part.element.type.classNameWithoutPtr» deserializeNode:bodyNode];
									if (bodyObject != nil) [responseBodyParts addObject:bodyObject];
								}
%ENDFOR
								if ((bodyNode->ns != nil && xmlStrEqual(bodyNode->ns->prefix, cur->ns->prefix)) && 
									xmlStrEqual(bodyNode->name, (const xmlChar *) "Fault"))
								{
									SOAPFault *bodyObject = [SOAPFault deserializeNode:bodyNode];
									if (bodyObject != nil) [responseBodyParts addObject:bodyObject];
								}
							}
						}
						self.response.bodyParts = responseBodyParts;
					}
				}
			}
			xmlFreeDoc(doc);
		}
		
		xmlCleanupParser();
		[self.delegate operation:self completedWithResponse:self.response];
	}
}

@end
%ENDFOR

static %«className»_envelope *%«className»SharedEnvelopeInstance = nil;
@implementation %«className»_envelope

+ (%«className»_envelope *)sharedInstance
{
	if(%«className»SharedEnvelopeInstance == nil) {
		%«className»SharedEnvelopeInstance = [%«className»_envelope new];
	}
	
	return %«className»SharedEnvelopeInstance;
}

- (NSString *)serializedFormUsingHeaderElements:(NSDictionary *)headerElements bodyElements:(NSDictionary *)bodyElements bodyKeys:(NSArray *)bodyKeys
{
	xmlDocPtr doc;
	
	doc = xmlNewDoc((const xmlChar*)XML_DEFAULT_VERSION);
	if (doc == NULL) {
		NSLog(@"Error creating the xml document tree");
		return @"";
	}
	
	xmlNodePtr root = xmlNewDocNode(doc, NULL, (const xmlChar*)"Envelope", NULL);
	xmlDocSetRootElement(doc, root);
	
%IFEQ soapVersion 1.2
	xmlNsPtr soapEnvelopeNs = xmlNewNs(root, (const xmlChar*)"http://www.w3.org/2003/05/soap-envelope", (const xmlChar*)"soap");
%ELSE
	xmlNsPtr soapEnvelopeNs = xmlNewNs(root, (const xmlChar*)"http://schemas.xmlsoap.org/soap/envelope/", (const xmlChar*)"soap");
%ENDIF

	xmlSetNs(root, soapEnvelopeNs);
	
	xmlNsPtr xslNs = xmlNewNs(root, (const xmlChar*)"http://www.w3.org/1999/XSL/Transform", (const xmlChar*)"xsl");
	xmlNewNs(root, (const xmlChar*)"http://www.w3.org/2001/XMLSchema-instance", (const xmlChar*)"xsi");
	
	xmlNewNsProp(root, xslNs, (const xmlChar*)"version", (const xmlChar*)"1.0");
	
%FOREACH schema in schema.wsdl.schemas
	xmlNewNs(root, (const xmlChar*)"%«schema.fullName»", (const xmlChar*)"%«schema.prefix»");
%ENDFOR
	
	if((headerElements != nil) && ([headerElements count] > 0)) {
		xmlNodePtr headerNode = xmlNewDocNode(doc, soapEnvelopeNs, (const xmlChar*)"Header", NULL);
		xmlAddChild(root, headerNode);
		
		for(NSString *key in [headerElements allKeys]) {
			id header = [headerElements objectForKey:key];
			xmlAddChild(headerNode, [header xmlNodeForDoc:doc elementName:key elementNSPrefix:nil]);
		}
	}
	
	if((bodyElements != nil) && ([bodyElements count] > 0)) {
		xmlNodePtr bodyNode = xmlNewDocNode(doc, soapEnvelopeNs, (const xmlChar*)"Body", NULL);
		xmlAddChild(root, bodyNode);
		
		for(NSString *key in bodyKeys) {
			id body = [bodyElements objectForKey:key];
			xmlAddChild(bodyNode, [body xmlNodeForDoc:doc elementName:key elementNSPrefix:nil]);
		}
	}
	
	xmlChar *buf;
	int size;
	xmlDocDumpFormatMemory(doc, &buf, &size, 1);
	
	NSString *serializedForm = [NSString stringWithCString:(const char*)buf encoding:NSUTF8StringEncoding];
	xmlFree(buf);
	
	xmlFreeDoc(doc);	
	return serializedForm;
}

@end

@implementation %«className»Response

- (id)init
{
	if((self = [super init])) {
		_headers = nil;
		_bodyParts = nil;
		_error = nil;
	}
	return self;
}

@end
